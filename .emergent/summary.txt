<analysis>
The trajectory details the AI engineer's extensive work on the GreyOak application. Initially, the focus was on validating the GreyOak Score Engine after CP7, requiring real-world market data. This led to a challenging phase of finding a reliable data source, moving from  (blocked) to  (insufficient data) and  (issues), finally succeeding with  for real NSE data. The Score Engine's validation showed success in identifying fundamental quality (Test #1) and stability (Test #3), but critically failed on crash protection (Test #2).

Following this, the task shifted to developing a Predictor Model MVP. The AI meticulously implemented the predictor's architecture, including feature engineering, triple-barrier labeling, LightGBM training, and API integration. However, rigorous testing, including runs with relaxed thresholds and gate-free historical backtests, revealed a fundamental flaw: the ML model is not learning predictive patterns, consistently generating near-random probabilities and no confident buy/sell signals. While the architecture is robust and adheres to no-lookahead principles, the core ML component for timing signals is currently ineffective.
</analysis>

<product_requirements>
The core product is a deterministic, sector-aware stock scoring engine for Indian equities, generating a 0-100 GreyOak Score across six pillars (Fundamentals, Technicals, Relative Strength, Ownership, Quality, Sector Momentum). It includes risk penalties, sequential guardrails, and assigns investment bands.
Post-CP7, the requirements evolved into rigorous validation:
- **Real-world data testing**: Use actual market data ( was adopted).
- **Historical Backtesting**: Conduct tests across diverse market conditions (bull, bear, crash, sideways).
- **Pillar Logic Validation**: Verify pillar scores correlate logically with underlying metrics.
- **Quality Consistency & Stability**: Ensure consistent identification of superior companies and score stability.
- **Defensive Quality**: Prove capital protection during downturns (lower drawdown).
- **Quality Spread Analysis**: Show quality advantage increases during stress.
- **Comprehensive Reporting & Visualization**.

The subsequent requirement was the **Predictor Model MVP**:
- **Approach**: Phased (MVP first, then production).
- **Scope (MVP)**: Trader horizon (20 trading days). Triple-barrier labeling (static ATR). LightGBM (multiclass) + isotonic calibration. Features: returns (1/5/10/20), RSI14, ATR14/Price, Distance to DMA20/50, Breakout vs hi20, Volume surprise. Timing bands (TimingSB, TimingBuy, TimingHold, TimingAvoid). API-ready (). Parquet/CSV outputs. Gates for amplitude (E, RA minimums) and coverage caps.
</product_requirements>

<key_technical_concepts>
- **FastAPI**: Python web framework for REST APIs.
- **Pandas/NumPy**: Extensive use for data manipulation and numerical operations.
- **Matplotlib/Seaborn**: For data visualization of test results.
- ****: Python library for downloading historical NSE India market data.
- **LightGBM**: Gradient boosting framework used for the Predictor Model.
- **Scikit-learn**: Used for model calibration (Isotonic Regression) and standardization.
- **PyYAML**: For configuration management (e.g., ).
- **============================= test session starts ==============================
platform linux -- Python 3.11.14, pytest-8.4.2, pluggy-1.6.0
rootdir: /app
plugins: cov-7.0.0, anyio-3.7.1
collected 331 items

backend/test_api.py F                                                    [  0%]
backend/tests/integration/test_all_six_pillars.py .FF...                 [  2%]
backend/tests/integration/test_data_pipeline.py ...........              [  5%]
backend/tests/integration/test_pillars_ftr.py ....FF                     [  7%]
backend/tests/performance/test_performance.py FF..FFF.F                  [  9%]
backend/tests/test_predictor_rules.py .....                              [ 11%]
backend/tests/unit/test_config_manager.py .....................          [ 17%]
backend/tests/unit/test_data_hygiene.py ...................              [ 23%]
backend/tests/unit/test_golden_values.py ......                          [ 25%]
backend/tests/unit/test_guardrails.py .....................              [ 31%]
backend/tests/unit/test_indicators.py ...............                    [ 36%]
backend/tests/unit/test_ingestion.py ................                    [ 41%]
backend/tests/unit/test_normalization.py .............................   [ 49%]
backend/tests/unit/test_persistence.py FFFEEEEEEEEEEEEEEEEEEEEEFEEEE     [ 58%]
backend/tests/unit/test_pillars_f.py .......FF                           [ 61%]
backend/tests/unit/test_pillars_o.py ..........                          [ 64%]
backend/tests/unit/test_pillars_q.py ....FF..F..                         [ 67%]
backend/tests/unit/test_pillars_r.py ............                        [ 71%]
backend/tests/unit/test_pillars_s.py .FF..FFFFFFF.                       [ 75%]
backend/tests/unit/test_pillars_t.py ...........                         [ 78%]
backend/tests/unit/test_risk_penalty.py ....................             [ 84%]
backend/tests/unit/test_schema_validation.py ....F...........            [ 89%]
backend/tests/unit/test_scoring.py ...............                       [ 93%]
backend/tests/unit/test_validators.py ....................               [100%]

==================================== ERRORS ====================================
____ ERROR at setup of TestDatabaseInitialization.test_safe_connection_info ____

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestConnectionManagement.test_connection_context_manager_success _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestConnectionManagement.test_connection_context_manager_error _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestConnectionManagement.test_connection_context_manager_rollback_on_error _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
___ ERROR at setup of TestConnectionManagement.test_test_connection_success ____

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
___ ERROR at setup of TestConnectionManagement.test_test_connection_failure ____

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
___________ ERROR at setup of TestSaveScore.test_save_score_success ____________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
________ ERROR at setup of TestSaveScore.test_save_score_invalid_input _________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_________ ERROR at setup of TestSaveScore.test_save_score_empty_ticker _________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_____ ERROR at setup of TestSaveScore.test_save_score_invalid_score_range ______

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
________ ERROR at setup of TestSaveScore.test_save_score_database_error ________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_____________ ERROR at setup of TestGetScore.test_get_score_found ______________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
___________ ERROR at setup of TestGetScore.test_get_score_not_found ____________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_________ ERROR at setup of TestGetScore.test_get_score_invalid_ticker _________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
__________ ERROR at setup of TestGetScore.test_get_score_invalid_mode __________

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
___ ERROR at setup of TestGetScoresByTicker.test_get_scores_by_ticker_basic ____

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestGetScoresByTicker.test_get_scores_by_ticker_with_filters _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestGetScoresByTicker.test_get_scores_by_ticker_invalid_mode _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
____ ERROR at setup of TestGetScoresByBand.test_get_scores_by_band_success _____

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
__ ERROR at setup of TestGetScoresByBand.test_get_scores_by_band_invalid_band __

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
__ ERROR at setup of TestGetScoresByBand.test_get_scores_by_band_invalid_mode __

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
__ ERROR at setup of TestUtilityFunctions.test_row_to_score_output_conversion __

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_ ERROR at setup of TestUtilityFunctions.test_row_to_score_output_invalid_data _

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
_____ ERROR at setup of TestDatabaseStats.test_get_database_stats_success ______

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
______ ERROR at setup of TestDatabaseStats.test_get_database_stats_error _______

    @pytest.fixture
    def mock_db():
        """Create a database instance with mocked connection for unit tests."""
>       db = ScoreDatabase("postgresql://test:test@localhost:5432/test")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=test password=test dbname=test host=localhost port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
E       	Is the server running on that host and accepting TCP/IP connections?

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (::1), port 5432 failed: Cannot assign requested address
	Is the server running on that host and accepting TCP/IP connections?
=================================== FAILURES ===================================
________________________________ test_endpoints ________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_________ TestAllSixPillars.test_pillar_score_ranges_and_distributions _________

self = <tests.integration.test_all_six_pillars.TestAllSixPillars object at 0xfde8e8789dd0>
config_manager = <greyoak_score.core.config_manager.ConfigManager object at 0xfde8e82f8710>
clean_data = (           date         ticker         open  ...   sigma20  sigma60  sector_group
0    2025-07-17  ASIANPAINT.NS  169...9-08    RELIANCE.NS  ...               0.0   diversified

[15 rows x 6 columns], 0.3651646447140382, 0.793123691488591)

    def test_pillar_score_ranges_and_distributions(self, config_manager, clean_data):
        """Test that all pillars produce reasonable score distributions."""
        results = self.test_all_six_pillars_with_real_data(config_manager, clean_data)
    
        print(f"\n📈 Pillar Score Distributions:")
    
        for pillar_name in ['F', 'T', 'R', 'O', 'Q', 'S']:
            scores_df = results[pillar_name]
            score_col = f"{pillar_name}_score"
            scores = scores_df[score_col].values
    
            # Statistical checks
            score_range = scores.max() - scores.min()
            score_std = scores.std()
    
            print(f"  {pillar_name}: mean={scores.mean():.1f}, std={score_std:.1f}, range={score_range:.1f}")
    
            # Each pillar should have some variation
>           assert score_range > 5, f"{pillar_name} pillar should show score variation > 5 points"
E           AssertionError: Q pillar should show score variation > 5 points
E           assert 0.0 > 5

backend/tests/integration/test_all_six_pillars.py:161: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.ingestion:ingestion.py:69   ⚠️  Schema validation warning: 4 validation errors for DailyPriceData
rsi14
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
atr14
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma20
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma60
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
WARNING  greyoak_score.data.ingestion:ingestion.py:124   ⚠️  Schema validation warning: 4 validation errors for FundamentalsData
pe
  Input should be greater than 0 [type=greater_than, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than
opm_stdev_12q
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
gnpa_pct
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
pcr_pct
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
----------------------------- Captured stdout call -----------------------------

🔄 Calculating all 6 pillars...
  ✅ F Pillar: 15 stocks
  ✅ T Pillar: 15 stocks
  ✅ R Pillar: 15 stocks
  ✅ O Pillar: 15 stocks
  ✅ Q Pillar: 15 stocks
  ✅ S Pillar: 15 stocks (with S_z tracking)

📊 Ticker Coverage:
  F: 15 tickers
  T: 15 tickers
  R: 15 tickers
  O: 15 tickers
  Q: 15 tickers
  S: 15 tickers
  📈 Common across all 6 pillars: 15 tickers

📈 Pillar Score Distributions:
  F: mean=50.0, std=8.6, range=33.0
  T: mean=31.0, std=12.4, range=45.0
  R: mean=53.3, std=28.8, range=93.3
  O: mean=14.7, std=15.8, range=50.0
  Q: mean=50.0, std=0.0, range=0.0
________________ TestAllSixPillars.test_s_z_tracking_validation ________________

self = <tests.integration.test_all_six_pillars.TestAllSixPillars object at 0xfde8e8789210>
config_manager = <greyoak_score.core.config_manager.ConfigManager object at 0xfde8e833ecd0>
clean_data = (           date         ticker         open  ...   sigma20  sigma60  sector_group
0    2025-07-17  ASIANPAINT.NS  169...9-08    RELIANCE.NS  ...               0.0   diversified

[15 rows x 6 columns], 0.3651646447140382, 0.793123691488591)

    def test_s_z_tracking_validation(self, config_manager, clean_data):
        """CRITICAL: Validate S_z tracking for guardrails system."""
        results = self.test_all_six_pillars_with_real_data(config_manager, clean_data)
    
        s_scores = results['S']
    
        print(f"\n📊 S_z Validation:")
        s_z_values = s_scores['S_z'].values
    
        print(f"  S_z range: [{s_z_values.min():.2f}, {s_z_values.max():.2f}]")
        print(f"  S_z mean: {s_z_values.mean():.2f}, std: {s_z_values.std():.2f}")
    
        # CRITICAL validations for guardrails
        assert not np.isnan(s_z_values).any(), "S_z values must not be NaN"
        assert np.isfinite(s_z_values).all(), "S_z values must be finite"
    
        # S_z should be z-scores (typically -3 to +3, but allow wider range)
        assert all(-10 <= s_z <= 10 for s_z in s_z_values), "S_z should be in reasonable z-score range"
    
        # Check S_z by sector
        sector_s_z = {}
        for _, row in s_scores.iterrows():
            sector = row['S_details']['sector_group']
            if sector not in sector_s_z:
                sector_s_z[sector] = []
            sector_s_z[sector].append(row['S_z'])
    
        print(f"  S_z by sector:")
        for sector, s_z_list in sector_s_z.items():
            mean_s_z = np.mean(s_z_list)
            print(f"    {sector}: {mean_s_z:.2f}")
    
        # Should have different S_z across sectors (cross-sector normalization)
        sector_means = [np.mean(s_z_list) for s_z_list in sector_s_z.values()]
        s_z_range = max(sector_means) - min(sector_means)
>       assert s_z_range > 0.1, "Should have S_z variation across sectors"
E       AssertionError: Should have S_z variation across sectors
E       assert 0.0 > 0.1

backend/tests/integration/test_all_six_pillars.py:203: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.ingestion:ingestion.py:69   ⚠️  Schema validation warning: 4 validation errors for DailyPriceData
rsi14
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
atr14
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma20
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma60
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
WARNING  greyoak_score.data.ingestion:ingestion.py:124   ⚠️  Schema validation warning: 4 validation errors for FundamentalsData
pe
  Input should be greater than 0 [type=greater_than, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than
opm_stdev_12q
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
gnpa_pct
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
pcr_pct
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
----------------------------- Captured stdout call -----------------------------

🔄 Calculating all 6 pillars...
  ✅ F Pillar: 15 stocks
  ✅ T Pillar: 15 stocks
  ✅ R Pillar: 15 stocks
  ✅ O Pillar: 15 stocks
  ✅ Q Pillar: 15 stocks
  ✅ S Pillar: 15 stocks (with S_z tracking)

📊 Ticker Coverage:
  F: 15 tickers
  T: 15 tickers
  R: 15 tickers
  O: 15 tickers
  Q: 15 tickers
  S: 15 tickers
  📈 Common across all 6 pillars: 15 tickers

📊 S_z Validation:
  S_z range: [0.00, 0.00]
  S_z mean: 0.00, std: 0.00
  S_z by sector:
    fmcg: 0.00
    auto_caps: 0.00
    banks: 0.00
    metals: 0.00
    it: 0.00
    diversified: 0.00
    psu_banks: 0.00
__________ TestPillarsFTRIntegration.test_pillar_score_distributions ___________

self = Index(['quarter_end', 'ticker', 'roe_3y', 'roce_3y', 'eps_cagr_3y',
       'sales_cagr_3y', 'pe', 'ev_ebitda', 'opm_st...   'roe_3y_banking', 'gnpa_pct', 'pcr_pct', 'nim_3y', 'sector_group_x',
       'sector_group_y'],
      dtype='object')
key = 'sector_group'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3790: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:152: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:181: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7080: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'sector_group'

pandas/_libs/hashtable_class_helper.pxi:7088: KeyError

The above exception was the direct cause of the following exception:

self = <tests.integration.test_pillars_ftr.TestPillarsFTRIntegration object at 0xfde8e87a55d0>
config_manager = <greyoak_score.core.config_manager.ConfigManager object at 0xfde8c45a0c90>
clean_data = (           date         ticker         open  ...   sigma20  sigma60  sector_group
0    2025-07-17  ASIANPAINT.NS  169...9-08    RELIANCE.NS  ...               0.0   diversified

[15 rows x 6 columns], 0.3651646447140382, 0.793123691488591)

    def test_pillar_score_distributions(self, config_manager, clean_data):
        """Test that pillar scores have reasonable distributions."""
        clean_prices, clean_fund, clean_own, _, _ = clean_data
        sector_map_df = clean_prices.groupby('ticker')['sector_group'].first().reset_index()
    
        # Get all pillar scores
        f_pillar = FundamentalsPillar(config_manager)
        t_pillar = TechnicalsPillar(config_manager)
        r_pillar = RelativeStrengthPillar(config_manager)
    
>       f_scores = f_pillar.calculate(clean_prices, clean_fund, clean_own, sector_map_df)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/integration/test_pillars_ftr.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/fundamentals.py:65: in calculate
    fund_with_sector['sector_group'].apply(self.is_banking_sector)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/frame.py:3893: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['quarter_end', 'ticker', 'roe_3y', 'roce_3y', 'eps_cagr_3y',
       'sales_cagr_3y', 'pe', 'ev_ebitda', 'opm_st...   'roe_3y_banking', 'gnpa_pct', 'pcr_pct', 'nim_3y', 'sector_group_x',
       'sector_group_y'],
      dtype='object')
key = 'sector_group'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'sector_group'

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3797: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.ingestion:ingestion.py:69   ⚠️  Schema validation warning: 4 validation errors for DailyPriceData
rsi14
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
atr14
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma20
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma60
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
WARNING  greyoak_score.data.ingestion:ingestion.py:124   ⚠️  Schema validation warning: 4 validation errors for FundamentalsData
pe
  Input should be greater than 0 [type=greater_than, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than
opm_stdev_12q
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
gnpa_pct
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
pcr_pct
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
__________ TestPillarsFTRIntegration.test_deterministic_pillar_scores __________

self = Index(['quarter_end', 'ticker', 'roe_3y', 'roce_3y', 'eps_cagr_3y',
       'sales_cagr_3y', 'pe', 'ev_ebitda', 'opm_st...   'roe_3y_banking', 'gnpa_pct', 'pcr_pct', 'nim_3y', 'sector_group_x',
       'sector_group_y'],
      dtype='object')
key = 'sector_group'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3790: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:152: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:181: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7080: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'sector_group'

pandas/_libs/hashtable_class_helper.pxi:7088: KeyError

The above exception was the direct cause of the following exception:

self = <tests.integration.test_pillars_ftr.TestPillarsFTRIntegration object at 0xfde8e87a4750>
config_manager = <greyoak_score.core.config_manager.ConfigManager object at 0xfde8e857f790>
clean_data = (           date         ticker         open  ...   sigma20  sigma60  sector_group
0    2025-07-17  ASIANPAINT.NS  169...9-08    RELIANCE.NS  ...               0.0   diversified

[15 rows x 6 columns], 0.3651646447140382, 0.793123691488591)

    def test_deterministic_pillar_scores(self, config_manager, clean_data):
        """Test that pillar scores are deterministic (same input = same output)."""
        clean_prices, clean_fund, clean_own, _, _ = clean_data
        sector_map_df = clean_prices.groupby('ticker')['sector_group'].first().reset_index()
    
        # Create pillar
        f_pillar = FundamentalsPillar(config_manager)
    
        # Calculate scores twice
>       result1 = f_pillar.calculate(clean_prices, clean_fund, clean_own, sector_map_df)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/integration/test_pillars_ftr.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/fundamentals.py:65: in calculate
    fund_with_sector['sector_group'].apply(self.is_banking_sector)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/frame.py:3893: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['quarter_end', 'ticker', 'roe_3y', 'roce_3y', 'eps_cagr_3y',
       'sales_cagr_3y', 'pe', 'ev_ebitda', 'opm_st...   'roe_3y_banking', 'gnpa_pct', 'pcr_pct', 'nim_3y', 'sector_group_x',
       'sector_group_y'],
      dtype='object')
key = 'sector_group'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'sector_group'

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3797: KeyError
------------------------------ Captured log setup ------------------------------
WARNING  greyoak_score.data.ingestion:ingestion.py:69   ⚠️  Schema validation warning: 4 validation errors for DailyPriceData
rsi14
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
atr14
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma20
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
sigma60
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
WARNING  greyoak_score.data.ingestion:ingestion.py:124   ⚠️  Schema validation warning: 4 validation errors for FundamentalsData
pe
  Input should be greater than 0 [type=greater_than, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than
opm_stdev_12q
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
gnpa_pct
  Input should be greater than or equal to 0 [type=greater_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/greater_than_equal
pcr_pct
  Input should be less than or equal to 100 [type=less_than_equal, input_value=nan, input_type=float]
    For further information visit https://errors.pydantic.dev/2.12/v/less_than_equal
__________ TestAPIPerformance.test_infrastructure_health_performance ___________

self = <test_performance.TestAPIPerformance object at 0xfde8e86b9950>

    def test_infrastructure_health_performance(self):
        """Test /health endpoint performance (infrastructure check)."""
        print(f"\n🏥 Testing Infrastructure Health Endpoint Performance")
        print(f"Target: P50 < {PERFORMANCE_THRESHOLDS['health_p50']}ms, P95 < {PERFORMANCE_THRESHOLDS['health_p95']}ms")
    
        metrics = run_concurrent_requests(f"{BASE_URL}/health", PERFORMANCE_SAMPLES)
        stats = metrics.get_statistics()
    
        print(f"Results: {stats['total_requests']} requests in {stats['duration_seconds']:.2f}s")
        print(f"  • P50: {stats['response_times']['p50_ms']:.1f}ms")
        print(f"  • P95: {stats['response_times']['p95_ms']:.1f}ms")
        print(f"  • Mean: {stats['response_times']['mean_ms']:.1f}ms")
        print(f"  • RPS: {stats['requests_per_second']:.1f}")
        print(f"  • Success Rate: {stats['status_codes']['2xx']}/{stats['total_requests']} ({stats['status_codes']['2xx']/stats['total_requests']*100:.1f}%)")
    
        # Assertions
        assert stats['response_times']['p50_ms'] < PERFORMANCE_THRESHOLDS['health_p50'], \
            f"P50 {stats['response_times']['p50_ms']:.1f}ms exceeds threshold {PERFORMANCE_THRESHOLDS['health_p50']}ms"
        assert stats['response_times']['p95_ms'] < PERFORMANCE_THRESHOLDS['health_p95'], \
            f"P95 {stats['response_times']['p95_ms']:.1f}ms exceeds threshold {PERFORMANCE_THRESHOLDS['health_p95']}ms"
>       assert stats['status_codes']['2xx'] >= stats['total_requests'] * 0.95, \
            f"Success rate {stats['status_codes']['2xx']/stats['total_requests']*100:.1f}% below 95%"
E       AssertionError: Success rate 0.0% below 95%
E       assert 0 >= (50 * 0.95)

backend/tests/performance/test_performance.py:167: AssertionError
----------------------------- Captured stdout call -----------------------------

🏥 Testing Infrastructure Health Endpoint Performance
Target: P50 < 50ms, P95 < 100ms
Results: 50 requests in 0.04s
  • P50: 7.0ms
  • P95: 11.7ms
  • Mean: 7.1ms
  • RPS: 1178.4
  • Success Rate: 0/50 (0.0%)
____________ TestAPIPerformance.test_application_health_performance ____________

self = <test_performance.TestAPIPerformance object at 0xfde8e87a5410>

    def test_application_health_performance(self):
        """Test /api/v1/health endpoint performance (application check with DB)."""
        print(f"\n🏥 Testing Application Health Endpoint Performance")
        print(f"Target: P50 < {PERFORMANCE_THRESHOLDS['app_health_p50']}ms, P95 < {PERFORMANCE_THRESHOLDS['app_health_p95']}ms")
    
        metrics = run_concurrent_requests(f"{BASE_URL}/api/v1/health", PERFORMANCE_SAMPLES)
        stats = metrics.get_statistics()
    
        print(f"Results: {stats['total_requests']} requests in {stats['duration_seconds']:.2f}s")
        print(f"  • P50: {stats['response_times']['p50_ms']:.1f}ms")
        print(f"  • P95: {stats['response_times']['p95_ms']:.1f}ms")
        print(f"  • Mean: {stats['response_times']['mean_ms']:.1f}ms")
        print(f"  • RPS: {stats['requests_per_second']:.1f}")
        print(f"  • Success Rate: {stats['status_codes']['2xx']}/{stats['total_requests']} ({stats['status_codes']['2xx']/stats['total_requests']*100:.1f}%)")
    
        # Assertions (more lenient due to DB connectivity)
        assert stats['response_times']['p50_ms'] < PERFORMANCE_THRESHOLDS['app_health_p50'], \
            f"P50 {stats['response_times']['p50_ms']:.1f}ms exceeds threshold {PERFORMANCE_THRESHOLDS['app_health_p50']}ms"
        assert stats['response_times']['p95_ms'] < PERFORMANCE_THRESHOLDS['app_health_p95'], \
            f"P95 {stats['response_times']['p95_ms']:.1f}ms exceeds threshold {PERFORMANCE_THRESHOLDS['app_health_p95']}ms"
>       assert stats['status_codes']['2xx'] >= stats['total_requests'] * 0.80, \
            f"Success rate {stats['status_codes']['2xx']/stats['total_requests']*100:.1f}% below 80%"
E       AssertionError: Success rate 0.0% below 80%
E       assert 0 >= (50 * 0.8)

backend/tests/performance/test_performance.py:190: AssertionError
----------------------------- Captured stdout call -----------------------------

🏥 Testing Application Health Endpoint Performance
Target: P50 < 100ms, P95 < 250ms
Results: 50 requests in 0.10s
  • P50: 7.9ms
  • P95: 74.4ms
  • Mean: 21.2ms
  • RPS: 483.7
  • Success Rate: 0/50 (0.0%)
__________ TestRateLimitingPerformance.test_rate_limiting_enforcement __________

self = <test_performance.TestRateLimitingPerformance object at 0xfde8e86ba7d0>

    def test_rate_limiting_enforcement(self):
        """Test that rate limiting is properly enforced at 60 req/min."""
        print(f"\n🚦 Testing Rate Limiting Enforcement (60 req/min)")
    
        # Make rapid requests to trigger rate limiting
        start_time = time.time()
        responses = []
    
        for i in range(RATE_LIMIT_TEST_REQUESTS):
            try:
                response = requests.get(f"{BASE_URL}/api/v1/health", timeout=5)
                responses.append({
                    'status_code': response.status_code,
                    'time': time.time() - start_time,
                    'headers': dict(response.headers)
                })
            except Exception as e:
                responses.append({
                    'status_code': 0,
                    'time': time.time() - start_time,
                    'error': str(e)
                })
    
        # Analyze results
        success_responses = [r for r in responses if r['status_code'] == 200]
        rate_limited = [r for r in responses if r['status_code'] == 429]
    
        print(f"Results: {len(responses)} requests over {responses[-1]['time']:.1f}s")
        print(f"  • Successful (200): {len(success_responses)}")
        print(f"  • Rate Limited (429): {len(rate_limited)}")
        print(f"  • Rate Limit Headers Present: {sum(1 for r in responses if r.get('headers', {}).get('x-ratelimit-limit')) > 0}")
    
        # Assertions
>       assert len(rate_limited) > 0, "Rate limiting should have been triggered"
E       AssertionError: Rate limiting should have been triggered
E       assert 0 > 0
E        +  where 0 = len([])

backend/tests/performance/test_performance.py:286: AssertionError
----------------------------- Captured stdout call -----------------------------

🚦 Testing Rate Limiting Enforcement (60 req/min)
Results: 70 requests over 0.0s
  • Successful (200): 0
  • Rate Limited (429): 0
  • Rate Limit Headers Present: False
__________ TestRateLimitingPerformance.test_health_endpoint_exemption __________

self = <test_performance.TestRateLimitingPerformance object at 0xfde8e866c9d0>

    def test_health_endpoint_exemption(self):
        """Test that /health endpoint is exempt from rate limiting."""
        print(f"\n🚦 Testing Health Endpoint Rate Limit Exemption")
    
        # Make many requests to /health endpoint
        start_time = time.time()
        responses = []
    
        for i in range(100):  # More than rate limit
            try:
                response = requests.get(f"{BASE_URL}/health", timeout=5)
                responses.append(response.status_code)
            except Exception as e:
                responses.append(0)
    
        duration = time.time() - start_time
        success_responses = sum(1 for code in responses if code == 200)
        rate_limited = sum(1 for code in responses if code == 429)
    
        print(f"Results: 100 requests to /health over {duration:.1f}s")
        print(f"  • Successful (200): {success_responses}")
        print(f"  • Rate Limited (429): {rate_limited}")
        print(f"  • Success Rate: {success_responses}%")
    
        # Assertions - health endpoint should not be rate limited
        assert rate_limited == 0, f"Health endpoint should not be rate limited, got {rate_limited} 429s"
>       assert success_responses >= 95, f"Health endpoint success rate too low: {success_responses}%"
E       AssertionError: Health endpoint success rate too low: 0%
E       assert 0 >= 95

backend/tests/performance/test_performance.py:322: AssertionError
----------------------------- Captured stdout call -----------------------------

🚦 Testing Health Endpoint Rate Limit Exemption
Results: 100 requests to /health over 0.1s
  • Successful (200): 0
  • Rate Limited (429): 0
  • Success Rate: 0%
__________ TestConcurrencyPerformance.test_concurrent_user_simulation __________

self = <test_performance.TestConcurrencyPerformance object at 0xfde8e866d150>

    def test_concurrent_user_simulation(self):
        """Simulate multiple concurrent users accessing the API."""
        print(f"\n👥 Testing Concurrent User Performance ({CONCURRENT_USERS} users)")
    
        def simulate_user_session():
            """Simulate a user session with multiple API calls."""
            session_metrics = PerformanceMetrics()
            session_start = time.time()
    
            try:
                # Health check
                rt, sc, err = make_request(f"{BASE_URL}/health")
                session_metrics.add_response(rt, sc, err)
    
                # App health check
                rt, sc, err = make_request(f"{BASE_URL}/api/v1/health")
                session_metrics.add_response(rt, sc, err)
    
                # Score history lookup
                rt, sc, err = make_request(f"{BASE_URL}/api/v1/scores/RELIANCE.NS?limit=5")
                session_metrics.add_response(rt, sc, err)
    
            except Exception as e:
                session_metrics.errors.append(str(e))
    
            session_metrics.start_time = session_start
            session_metrics.end_time = time.time()
            return session_metrics
    
        # Run concurrent user sessions
        overall_start = time.time()
        with ThreadPoolExecutor(max_workers=CONCURRENT_USERS) as executor:
            futures = [executor.submit(simulate_user_session) for _ in range(CONCURRENT_USERS)]
            results = [future.result() for future in as_completed(futures)]
    
        overall_duration = time.time() - overall_start
    
        # Aggregate results
        total_requests = sum(len(r.response_times) for r in results)
        successful_sessions = sum(1 for r in results if r.response_times and max(r.status_codes) < 400)
        total_errors = sum(len(r.errors) for r in results)
    
        all_response_times = []
        for result in results:
            all_response_times.extend(result.response_times)
    
        if all_response_times:
            sorted_times = sorted(all_response_times)
            p95_ms = sorted_times[int(0.95 * len(sorted_times))] * 1000
        else:
            p95_ms = 0
    
        print(f"Results: {CONCURRENT_USERS} concurrent users over {overall_duration:.1f}s")
        print(f"  • Total Requests: {total_requests}")
        print(f"  • Successful Sessions: {successful_sessions}/{CONCURRENT_USERS} ({successful_sessions/CONCURRENT_USERS*100:.1f}%)")
        print(f"  • Total Errors: {total_errors}")
        print(f"  • Overall P95 Response Time: {p95_ms:.1f}ms")
        print(f"  • Throughput: {total_requests/overall_duration:.1f} req/s")
    
        # Assertions
>       assert successful_sessions >= CONCURRENT_USERS * 0.80, \
            f"Too many failed sessions: {successful_sessions}/{CONCURRENT_USERS}"
E       AssertionError: Too many failed sessions: 0/25
E       assert 0 >= (25 * 0.8)

backend/tests/performance/test_performance.py:389: AssertionError
----------------------------- Captured stdout call -----------------------------

👥 Testing Concurrent User Performance (25 users)
Results: 25 concurrent users over 0.1s
  • Total Requests: 75
  • Successful Sessions: 0/25 (0.0%)
  • Total Errors: 0
  • Overall P95 Response Time: 13.1ms
  • Throughput: 1281.6 req/s
___________ TestDatabasePerformance.test_connection_pool_efficiency ____________

self = <test_performance.TestDatabasePerformance object at 0xfde8e866fdd0>

    def test_connection_pool_efficiency(self):
        """Test database connection pool performance under load."""
        print(f"\n🏊 Testing Database Connection Pool Efficiency")
    
        # Make concurrent requests that hit the database
        start_time = time.time()
    
        # Test with requests that require database connectivity
        metrics = run_concurrent_requests(f"{BASE_URL}/api/v1/health", 50)
        stats = metrics.get_statistics()
    
        duration = time.time() - start_time
    
        print(f"Connection Pool Test Results:")
        print(f"  • Total Requests: {stats['total_requests']}")
        print(f"  • Duration: {duration:.2f}s")
        print(f"  • Success Rate: {stats['status_codes']['2xx']}/{stats['total_requests']} ({stats['status_codes']['2xx']/stats['total_requests']*100:.1f}%)")
        print(f"  • Average Response Time: {stats['response_times']['mean_ms']:.1f}ms")
        print(f"  • P95 Response Time: {stats['response_times']['p95_ms']:.1f}ms")
    
        # Calculate pool efficiency (high success rate indicates good pool management)
        pool_efficiency = stats['status_codes']['2xx'] / stats['total_requests']
    
        print(f"  • Pool Efficiency: {pool_efficiency*100:.1f}%")
    
        # Assertions
>       assert pool_efficiency >= PERFORMANCE_THRESHOLDS['pool_efficiency'], \
            f"Connection pool efficiency {pool_efficiency*100:.1f}% below threshold {PERFORMANCE_THRESHOLDS['pool_efficiency']*100:.1f}%"
E       AssertionError: Connection pool efficiency 0.0% below threshold 85.0%
E       assert 0.0 >= 0.85

backend/tests/performance/test_performance.py:482: AssertionError
----------------------------- Captured stdout call -----------------------------

🏊 Testing Database Connection Pool Efficiency
Connection Pool Test Results:
  • Total Requests: 50
  • Duration: 0.05s
  • Success Rate: 0/50 (0.0%)
  • Average Response Time: 9.0ms
  • P95 Response Time: 15.4ms
  • Pool Efficiency: 0.0%
_____________ TestDatabaseInitialization.test_init_with_custom_url _____________

self = <tests.unit.test_persistence.TestDatabaseInitialization object at 0xfde8e85c0a50>

    def test_init_with_custom_url(self):
        """Test initialization with custom database URL."""
        custom_url = "postgresql://user:pass@host:5432/dbname"
>       db = ScoreDatabase(custom_url)
             ^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=user password=pass dbname=dbname host=host port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: could not translate host name "host" to address: No address associated with hostname

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): could not translate host name "host" to address: No address associated with hostname

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): could not translate host name "host" to address: No address associated with hostname

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): could not translate host name "host" to address: No address associated with hostname

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: could not translate host name "host" to address: No address associated with hostname
_______ TestDatabaseInitialization.test_init_with_environment_variables ________

self = <tests.unit.test_persistence.TestDatabaseInitialization object at 0xfde8e85c1050>

    def test_init_with_environment_variables(self):
        """Test initialization using environment variables."""
        with patch.dict(os.environ, {
            'PGUSER': 'testuser',
            'PGPASSWORD': 'testpass',
            'PGHOST': 'testhost',
            'PGPORT': '5433',
            'PGDATABASE': 'testdb'
        }):
>           db = ScoreDatabase()
                 ^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=testuser password=testpass dbname=testdb host=testhost port=5433 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: could not translate host name "testhost" to address: Name or service not known

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): could not translate host name "testhost" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): could not translate host name "testhost" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): could not translate host name "testhost" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: could not translate host name "testhost" to address: Name or service not known
______________ TestDatabaseInitialization.test_init_with_defaults ______________

self = <tests.unit.test_persistence.TestDatabaseInitialization object at 0xfde8e85c1650>

    def test_init_with_defaults(self):
        """Test initialization with default values when env vars are missing."""
        # Clear relevant env vars by removing them entirely
        env_vars = ['PGUSER', 'PGPASSWORD', 'PGHOST', 'PGPORT', 'PGDATABASE']
        with patch.dict(os.environ, {}, clear=True):
            # Ensure the env vars don't exist
            for var in env_vars:
                os.environ.pop(var, None)
>           db = ScoreDatabase()
                 ^^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=greyoak password=greyoak_pw_change_in_production dbname=greyoak_scores host=db port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: could not translate host name "db" to address: Name or service not known

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: could not translate host name "db" to address: Name or service not known
_______________ TestUtilityFunctions.test_get_database_singleton _______________

self = <tests.unit.test_persistence.TestUtilityFunctions object at 0xfde8e8540e90>

    def test_get_database_singleton(self):
        """Test singleton database instance."""
>       db1 = get_database()
              ^^^^^^^^^^^^^^

backend/tests/unit/test_persistence.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/data/persistence.py:681: in get_database
    _db_instance = ScoreDatabase()
                   ^^^^^^^^^^^^^^^
backend/greyoak_score/data/persistence.py:87: in __init__
    self._initialize_pool()
backend/greyoak_score/data/persistence.py:110: in _initialize_pool
    self._connection_pool = psycopg2.pool.ThreadedConnectionPool(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:161: in __init__
    AbstractConnectionPool.__init__(
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:59: in __init__
    self._connect()
/root/.venv/lib/python3.11/site-packages/psycopg2/pool.py:63: in _connect
    conn = psycopg2.connect(*self._args, **self._kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'user=greyoak password=greyoak_pw_change_in_production dbname=greyoak_scores host=db port=5432 connect_timeout=30'
connection_factory = None, cursor_factory = None
kwargs = {'connect_timeout': 30}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       psycopg2.OperationalError: could not translate host name "db" to address: Name or service not known

/root/.venv/lib/python3.11/site-packages/psycopg2/__init__.py:122: OperationalError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 1/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 1.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 2/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 2.0 seconds...
WARNING  greyoak_score.data.persistence:persistence.py:124 Connection pool initialization failed (attempt 3/4): could not translate host name "db" to address: Name or service not known

WARNING  greyoak_score.data.persistence:persistence.py:125 Retrying in 4.0 seconds...
ERROR    greyoak_score.data.persistence:persistence.py:120 Failed to initialize connection pool after 4 attempts: could not translate host name "db" to address: Name or service not known
_____________ TestFundamentalsPillar.test_partial_missing_metrics ______________

self = Index(['ticker', 'quarter_end', 'roe_3y', 'sales_cagr_3y', 'eps_cagr_3y', 'pe',
       'sector_group'],
      dtype='object')
key = 'ev_ebitda'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3790: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:152: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:181: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7080: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'ev_ebitda'

pandas/_libs/hashtable_class_helper.pxi:7088: KeyError

The above exception was the direct cause of the following exception:

self = <tests.unit.test_pillars_f.TestFundamentalsPillar object at 0xfde8e8539b50>
pillar = <greyoak_score.pillars.fundamentals.FundamentalsPillar object at 0xfde8e8549350>
sample_sector_map =      ticker sector_group
0  RELIANCE  diversified
1       TCS           it
2      INFY           it
3      HDFC        banks
4     ICICI        banks
sample_prices =      ticker trading_date  close
0  RELIANCE   2024-01-01   2500
1       TCS   2024-01-01   3400
2      INFY   2024-01-01   1600
3      HDFC   2024-01-01   1700
4     ICICI   2024-01-01   1200
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_partial_missing_metrics(self, pillar, sample_sector_map, sample_prices, empty_ownership):
        """Test handling of partial missing metrics in fundamentals."""
        # Some metrics missing
        fundamentals = pd.DataFrame({
            'ticker': ['TEST'],
            'quarter_end': pd.to_datetime(['2024-03-31']),
            'roe_3y': [0.15],
            'sales_cagr_3y': [None],  # Missing
            'eps_cagr_3y': [0.12],
            'pe': [25.0]
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['TEST'],
            'sector_group': ['it']
        })
    
        prices = pd.DataFrame({
            'ticker': ['TEST'],
            'trading_date': pd.to_datetime(['2024-01-01']),
            'close': [1000]
        })
    
>       result = pillar.calculate(prices, fundamentals, empty_ownership, sector_map)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_pillars_f.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/fundamentals.py:79: in calculate
    non_financial_results = self._calculate_non_financial_scores(non_financial_stocks)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend/greyoak_score/pillars/fundamentals.py:125: in _calculate_non_financial_scores
    stocks_df['valuation'] = stocks_df['ev_ebitda'].fillna(stocks_df['pe'])
                             ^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/frame.py:3893: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['ticker', 'quarter_end', 'roe_3y', 'sales_cagr_3y', 'eps_cagr_3y', 'pe',
       'sector_group'],
      dtype='object')
key = 'ev_ebitda'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'ev_ebitda'

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3797: KeyError
__________ TestFundamentalsPillar.test_multiple_quarters_takes_latest __________

self = Index(['ticker', 'quarter_end', 'roe_3y', 'sales_cagr_3y', 'eps_cagr_3y', 'pe',
       'sector_group'],
      dtype='object')
key = 'ev_ebitda'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3790: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
index.pyx:152: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:181: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas/_libs/hashtable_class_helper.pxi:7080: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   KeyError: 'ev_ebitda'

pandas/_libs/hashtable_class_helper.pxi:7088: KeyError

The above exception was the direct cause of the following exception:

self = <tests.unit.test_pillars_f.TestFundamentalsPillar object at 0xfde8e853a090>
pillar = <greyoak_score.pillars.fundamentals.FundamentalsPillar object at 0xfde90003c1d0>
sample_sector_map =      ticker sector_group
0  RELIANCE  diversified
1       TCS           it
2      INFY           it
3      HDFC        banks
4     ICICI        banks
sample_prices =      ticker trading_date  close
0  RELIANCE   2024-01-01   2500
1       TCS   2024-01-01   3400
2      INFY   2024-01-01   1600
3      HDFC   2024-01-01   1700
4     ICICI   2024-01-01   1200
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_multiple_quarters_takes_latest(self, pillar, sample_sector_map, sample_prices, empty_ownership):
        """Test that latest quarter data is used when multiple quarters available."""
        # Multiple quarters for same ticker
        fundamentals = pd.DataFrame({
            'ticker': ['TEST', 'TEST'],
            'quarter_end': pd.to_datetime(['2023-12-31', '2024-03-31']),
            'roe_3y': [0.10, 0.15],  # Different values
            'sales_cagr_3y': [0.05, 0.08],
            'eps_cagr_3y': [0.08, 0.12],
            'pe': [20.0, 25.0]
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['TEST'],
            'sector_group': ['it']
        })
    
        prices = pd.DataFrame({
            'ticker': ['TEST'],
            'trading_date': pd.to_datetime(['2024-01-01']),
            'close': [1000]
        })
    
>       result = pillar.calculate(prices, fundamentals, empty_ownership, sector_map)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_pillars_f.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/fundamentals.py:79: in calculate
    non_financial_results = self._calculate_non_financial_scores(non_financial_stocks)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend/greyoak_score/pillars/fundamentals.py:125: in _calculate_non_financial_scores
    stocks_df['valuation'] = stocks_df['ev_ebitda'].fillna(stocks_df['pe'])
                             ^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/frame.py:3893: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Index(['ticker', 'quarter_end', 'roe_3y', 'sales_cagr_3y', 'eps_cagr_3y', 'pe',
       'sector_group'],
      dtype='object')
key = 'ev_ebitda'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'ev_ebitda'

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3797: KeyError
______________ TestQualityPillar.test_omp_stability_lower_better _______________

self = <tests.unit.test_pillars_q.TestQualityPillar object at 0xfde8e84d92d0>
pillar = <greyoak_score.pillars.quality.QualityPillar object at 0xfde8e81dcc10>
sample_sector_map =     ticker sector_group
0   HIGH_Q           it
1    MED_Q           it
2    LOW_Q      finance
3  MIXED_Q      finance
sample_prices =     ticker       date  close
0   HIGH_Q 2024-01-01   1000
1    MED_Q 2024-01-01   1200
2    LOW_Q 2024-01-01    800
3  MIXED_Q 2024-01-01   1500
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_omp_stability_lower_better(self, pillar, sample_sector_map, sample_prices, empty_ownership):
        """Test that lower OPM standard deviation gives higher component score."""
        quality_data = pd.DataFrame({
            'ticker': ['STABLE', 'VOLATILE'],
            'quarter_end': pd.to_datetime(['2024-03-31'] * 2),
            'roce_3y': [0.20] * 2,  # Same ROCE
            'omp_stdev_12q': [0.01, 0.10]  # Different OPM stability
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['STABLE', 'VOLATILE'],
            'sector_group': ['test'] * 2
        })
    
        prices = pd.DataFrame({
            'ticker': ['STABLE', 'VOLATILE'],
            'date': pd.to_datetime(['2024-01-01'] * 2),
            'close': [1000] * 2
        })
    
        result = pillar.calculate(prices, quality_data, empty_ownership, sector_map)
    
        stable = result[result['ticker'] == 'STABLE'].iloc[0]
        volatile = result[result['ticker'] == 'VOLATILE'].iloc[0]
    
        # Check OPM stability component scores
>       stable_omp = stable['Q_details']['components']['omp_stability']['points']
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'omp_stability'

backend/tests/unit/test_pillars_q.py:188: KeyError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.core.normalization:normalization.py:133 Metric 'opm_stdev_12q' not found in DataFrame, returning NaN
_________________ TestQualityPillar.test_missing_quality_data __________________

self = <tests.unit.test_pillars_q.TestQualityPillar object at 0xfde8e84d9910>
pillar = <greyoak_score.pillars.quality.QualityPillar object at 0xfde8c46342d0>
sample_sector_map =     ticker sector_group
0   HIGH_Q           it
1    MED_Q           it
2    LOW_Q      finance
3  MIXED_Q      finance
sample_prices =     ticker       date  close
0   HIGH_Q 2024-01-01   1000
1    MED_Q 2024-01-01   1200
2    LOW_Q 2024-01-01    800
3  MIXED_Q 2024-01-01   1500
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_missing_quality_data(self, pillar, sample_sector_map, sample_prices, empty_ownership):
        """Test handling of missing quality data."""
        quality_with_missing = pd.DataFrame({
            'ticker': ['COMPLETE', 'PARTIAL', 'EMPTY'],
            'quarter_end': pd.to_datetime(['2024-03-31'] * 3),
            'roce_3y': [0.20, np.nan, np.nan],  # COMPLETE has both, PARTIAL missing ROCE
            'omp_stdev_12q': [0.05, 0.08, np.nan]  # EMPTY missing both
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['COMPLETE', 'PARTIAL', 'EMPTY'],
            'sector_group': ['test'] * 3
        })
    
        prices = pd.DataFrame({
            'ticker': ['COMPLETE', 'PARTIAL', 'EMPTY'],
            'date': pd.to_datetime(['2024-01-01'] * 3),
            'close': [1000] * 3
        })
    
        result = pillar.calculate(prices, quality_with_missing, empty_ownership, sector_map)
    
        # Should complete successfully
        assert len(result) == 3
    
        # Check that partial data is handled correctly
        partial_result = result[result['ticker'] == 'PARTIAL'].iloc[0]
        partial_components = partial_result['Q_details']['components']
    
        # Should have OPM stability but not ROCE
>       assert 'omp_stability' in partial_components
E       AssertionError: assert 'omp_stability' in {'roce_3y': {'points': 50.0, 'raw_value': nan, 'weight': 0.65}}

backend/tests/unit/test_pillars_q.py:223: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.core.normalization:normalization.py:133 Metric 'opm_stdev_12q' not found in DataFrame, returning NaN
________________ TestQualityPillar.test_empty_fundamentals_data ________________

self = <tests.unit.test_pillars_q.TestQualityPillar object at 0xfde8e84dabd0>
pillar = <greyoak_score.pillars.quality.QualityPillar object at 0xfde8e82d5490>
sample_sector_map =     ticker sector_group
0   HIGH_Q           it
1    MED_Q           it
2    LOW_Q      finance
3  MIXED_Q      finance
sample_prices =     ticker       date  close
0   HIGH_Q 2024-01-01   1000
1    MED_Q 2024-01-01   1200
2    LOW_Q 2024-01-01    800
3  MIXED_Q 2024-01-01   1500
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_empty_fundamentals_data(self, pillar, sample_sector_map, sample_prices, empty_ownership):
        """Test with empty fundamentals data."""
        empty_fundamentals = pd.DataFrame(columns=['ticker', 'quarter_end'])
    
>       result = pillar.calculate(sample_prices, empty_fundamentals, empty_ownership, sample_sector_map)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_pillars_q.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/quality.py:132: in calculate
    return result_df[['ticker', 'Q_score', 'Q_details']]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/frame.py:3899: in __getitem__
    indexer = self.columns._get_indexer_strict(key, "columns")[1]
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:6114: in _get_indexer_strict
    self._raise_if_missing(keyarr, indexer, axis_name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=0, step=1)
key = Index(['ticker', 'Q_score', 'Q_details'], dtype='object')
indexer = array([-1, -1, -1]), axis_name = 'columns'

    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:
        """
        Check that indexer can be used to return a result.
    
        e.g. at least one element was found,
        unless the list of keys was actually empty.
    
        Parameters
        ----------
        key : list-like
            Targeted labels (only used to show correct error message).
        indexer: array-like of booleans
            Indices corresponding to the key,
            (with -1 indicating not found).
        axis_name : str
    
        Raises
        ------
        KeyError
            If at least one key was requested but none was found.
        """
        if len(key) == 0:
            return
    
        # Count missing values
        missing_mask = indexer < 0
        nmissing = missing_mask.sum()
    
        if nmissing:
            # TODO: remove special-case; this is just to keep exception
            #  message tests from raising while debugging
            use_interval_msg = isinstance(self.dtype, IntervalDtype) or (
                isinstance(self.dtype, CategoricalDtype)
                # "Index" has no attribute "categories"  [attr-defined]
                and isinstance(
                    self.categories.dtype, IntervalDtype  # type: ignore[attr-defined]
                )
            )
    
            if nmissing == len(indexer):
                if use_interval_msg:
                    key = list(key)
>               raise KeyError(f"None of [{key}] are in the [{axis_name}]")
E               KeyError: "None of [Index(['ticker', 'Q_score', 'Q_details'], dtype='object')] are in the [columns]"

/root/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:6175: KeyError
------------------------------ Captured log call -------------------------------
WARNING  greyoak_score.pillars.quality:quality.py:146 ⚠️ No quality metrics available in fundamentals data. Expected: ['roce_3y', 'opm_stdev_12q']
WARNING  greyoak_score.core.normalization:normalization.py:133 Metric 'roce_3y' not found in DataFrame, returning NaN
WARNING  greyoak_score.core.normalization:normalization.py:133 Metric 'opm_stdev_12q' not found in DataFrame, returning NaN
WARNING  greyoak_score.pillars.quality:quality.py:130 ⚠️ No quality scores calculated
_________ TestSectorMomentumPillar.test_basic_sector_momentum_scoring __________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83e3ed0>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde902297250>
sample_sector_momentum_data =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
sample_sector_map =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_basic_sector_momentum_scoring(self, pillar, sample_sector_momentum_data,
                                         sample_sector_map, empty_fundamentals, empty_ownership):
        """Test basic sector momentum scoring with S_z tracking."""
>       result = pillar.calculate(
            sample_sector_momentum_data,
            empty_fundamentals,
            empty_ownership,
            sample_sector_map
        )

backend/tests/unit/test_pillars_s.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde902297250>
prices_df =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
__________ TestSectorMomentumPillar.test_s_z_calculation_cross_sector __________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f0510>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde93946b750>
sample_sector_momentum_data =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
sample_sector_map =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_s_z_calculation_cross_sector(self, pillar, sample_sector_momentum_data,
                                        sample_sector_map, empty_fundamentals, empty_ownership):
        """Test that S_z is calculated cross-sector (not within-sector)."""
>       result = pillar.calculate(
            sample_sector_momentum_data,
            empty_fundamentals,
            empty_ownership,
            sample_sector_map
        )

backend/tests/unit/test_pillars_s.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde93946b750>
prices_df =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
_______________ TestSectorMomentumPillar.test_horizon_weighting ________________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f0910>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8c46a0910>
sample_sector_momentum_data =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
sample_sector_map =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_horizon_weighting(self, pillar, sample_sector_momentum_data,
                             sample_sector_map, empty_fundamentals, empty_ownership):
        """Test that horizon weights (1M:20%, 3M:30%, 6M:50%) are applied correctly."""
>       result = pillar.calculate(
            sample_sector_momentum_data,
            empty_fundamentals,
            empty_ownership,
            sample_sector_map
        )

backend/tests/unit/test_pillars_s.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8c46a0910>
prices_df =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
______________ TestSectorMomentumPillar.test_missing_sector_data _______________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f0c90>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e832a890>
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_missing_sector_data(self, pillar, empty_fundamentals, empty_ownership):
        """Test handling of missing sector data."""
        # Price data with missing sector mapping
        prices_with_missing = pd.DataFrame({
            'ticker': ['MAPPED', 'UNMAPPED'],
            'date': pd.to_datetime(['2024-01-15'] * 2),
            'ret_21d': [0.10, 0.15],
            'ret_63d': [0.20, 0.25],
            'ret_126d': [0.30, 0.35],
            'sigma20': [0.02, 0.03]
        })
    
        # Sector map missing one ticker
        incomplete_sector_map = pd.DataFrame({
            'ticker': ['MAPPED'],
            'sector_group': ['test']
        })
    
>       result = pillar.calculate(
            prices_with_missing,
            empty_fundamentals,
            empty_ownership,
            incomplete_sector_map
        )

backend/tests/unit/test_pillars_s.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e832a890>
prices_df =      ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0    MAPPED 2024-01-15     0.10     0.20      0.30     0.02
1  UNMAPPED 2024-01-15     0.15     0.25      0.35     0.03
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =    ticker sector_group
0  MAPPED         test

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
_______________ TestSectorMomentumPillar.test_single_sector_case _______________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f1050>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e8253bd0>
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_single_sector_case(self, pillar, empty_fundamentals, empty_ownership):
        """Test sector momentum with only one sector."""
        single_sector_data = pd.DataFrame({
            'ticker': ['ONLY1', 'ONLY2'],
            'date': pd.to_datetime(['2024-01-15'] * 2),
            'ret_21d': [0.10, 0.12],
            'ret_63d': [0.20, 0.22],
            'ret_126d': [0.30, 0.32],
            'sigma20': [0.02, 0.03]
        })
    
        single_sector_map = pd.DataFrame({
            'ticker': ['ONLY1', 'ONLY2'],
            'sector_group': ['lonely'] * 2
        })
    
>       result = pillar.calculate(
            single_sector_data,
            empty_fundamentals,
            empty_ownership,
            single_sector_map
        )

backend/tests/unit/test_pillars_s.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e8253bd0>
prices_df =   ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0  ONLY1 2024-01-15     0.10     0.20      0.30     0.02
1  ONLY2 2024-01-15     0.12     0.22      0.32     0.03
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =   ticker sector_group
0  ONLY1       lonely
1  ONLY2       lonely

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
_____________ TestSectorMomentumPillar.test_volatility_protection ______________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f1410>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde900211050>
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_volatility_protection(self, pillar, empty_fundamentals, empty_ownership):
        """Test protection against zero volatility in sector momentum."""
        # Data with zero/near-zero volatility
        zero_vol_data = pd.DataFrame({
            'ticker': ['ZERO_VOL', 'NORMAL'],
            'date': pd.to_datetime(['2024-01-15'] * 2),
            'ret_21d': [0.10, 0.12],
            'ret_63d': [0.20, 0.22],
            'ret_126d': [0.30, 0.32],
            'sigma20': [0.0, 0.02]  # Zero vs normal volatility
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['ZERO_VOL', 'NORMAL'],
            'sector_group': ['testA', 'testB']  # Different sectors
        })
    
>       result = pillar.calculate(zero_vol_data, empty_fundamentals, empty_ownership, sector_map)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_pillars_s.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde900211050>
prices_df =      ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0  ZERO_VOL 2024-01-15     0.10     0.20      0.30     0.00
1    NORMAL 2024-01-15     0.12     0.22      0.32     0.02
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =      ticker sector_group
0  ZERO_VOL        testA
1    NORMAL        testB

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
______________ TestSectorMomentumPillar.test_s_z_summary_function ______________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f1710>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde902fdcf90>
sample_sector_momentum_data =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
sample_sector_map =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_s_z_summary_function(self, pillar, sample_sector_momentum_data,
                                sample_sector_map, empty_fundamentals, empty_ownership):
        """Test the S_z summary function for debugging."""
>       result = pillar.calculate(
            sample_sector_momentum_data,
            empty_fundamentals,
            empty_ownership,
            sample_sector_map
        )

backend/tests/unit/test_pillars_s.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde902fdcf90>
prices_df =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
___________ TestSectorMomentumPillar.test_critical_s_z_output_format ___________

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f1cd0>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e8662210>
sample_sector_momentum_data =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
sample_sector_map =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_critical_s_z_output_format(self, pillar, sample_sector_momentum_data,
                                      sample_sector_map, empty_fundamentals, empty_ownership):
        """CRITICAL: Test that S_z is properly output for guardrails system."""
>       result = pillar.calculate(
            sample_sector_momentum_data,
            empty_fundamentals,
            empty_ownership,
            sample_sector_map
        )

backend/tests/unit/test_pillars_s.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8e8662210>
prices_df =     ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0     IT_A 2024-01-15     0.15     0.25      0.35    0.020
...5
4  METAL_A 2024-01-15    -0.05    -0.02      0.02    0.040
5  METAL_B 2024-01-15    -0.08    -0.05     -0.01    0.045
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =     ticker sector_group
0     IT_A           it
1     IT_B           it
2   BANK_A        banks
3   BANK_B        banks
4  METAL_A       metals
5  METAL_B       metals

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
__ TestSectorMomentumPillar.test_cross_sector_normalization_not_within_sector __

self = <tests.unit.test_pillars_s.TestSectorMomentumPillar object at 0xfde8e83f2350>
pillar = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8c461c890>
empty_fundamentals = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
empty_ownership = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []

    def test_cross_sector_normalization_not_within_sector(self, pillar, empty_fundamentals, empty_ownership):
        """CRITICAL: Test that normalization is cross-sector, not within-sector."""
        # Design data where within-sector normalization would give different results
        cross_sector_test_data = pd.DataFrame({
            'ticker': ['STRONG_A', 'WEAK_A', 'STRONG_B', 'WEAK_B'],
            'date': pd.to_datetime(['2024-01-15'] * 4),
            # Sector A: both strong performers, Sector B: both weak performers
            'ret_21d': [0.20, 0.18, 0.05, 0.03],  # A > B clearly
            'ret_63d': [0.30, 0.28, 0.08, 0.06],
            'ret_126d': [0.40, 0.38, 0.12, 0.10],
            'sigma20': [0.02, 0.025, 0.03, 0.035]
        })
    
        sector_map = pd.DataFrame({
            'ticker': ['STRONG_A', 'WEAK_A', 'STRONG_B', 'WEAK_B'],
            'sector_group': ['sectorA', 'sectorA', 'sectorB', 'sectorB']
        })
    
>       result = pillar.calculate(cross_sector_test_data, empty_fundamentals, empty_ownership, sector_map)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

backend/tests/unit/test_pillars_s.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/greyoak_score/pillars/sector_momentum.py:61: in calculate
    self.validate_inputs(prices_df, fundamentals_df, ownership_df, sector_map_df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <greyoak_score.pillars.sector_momentum.SectorMomentumPillar object at 0xfde8c461c890>
prices_df =      ticker       date  ret_21d  ret_63d  ret_126d  sigma20
0  STRONG_A 2024-01-15     0.20     0.30      0.40    0.02...2  STRONG_B 2024-01-15     0.05     0.08      0.12    0.030
3    WEAK_B 2024-01-15     0.03     0.06      0.10    0.035
fundamentals_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
ownership_df = Empty DataFrame
Columns: [ticker, quarter_end]
Index: []
sector_map_df =      ticker sector_group
0  STRONG_A      sectorA
1    WEAK_A      sectorA
2  STRONG_B      sectorB
3    WEAK_B      sectorB

    def validate_inputs(
        self,
        prices_df: pd.DataFrame,
        fundamentals_df: pd.DataFrame,
        ownership_df: pd.DataFrame,
        sector_map_df: pd.DataFrame
    ) -> None:
        """Validate that required input data is present.
    
        Args:
            prices_df: Price data
            fundamentals_df: Fundamentals data
            ownership_df: Ownership data
            sector_map_df: Sector mapping
    
        Raises:
            ValueError: If required data is missing
        """
        if len(prices_df) == 0:
            raise ValueError("Empty prices DataFrame")
        if len(sector_map_df) == 0:
            raise ValueError("Empty sector_map DataFrame")
    
        # Check required columns
        required_price_cols = ["ticker", "close"]
        # Check for either 'date' or 'trading_date'
        if 'date' not in prices_df.columns and 'trading_date' not in prices_df.columns:
            required_price_cols.append('date_or_trading_date')
    
        missing_cols = [col for col in required_price_cols if col not in prices_df.columns]
        if missing_cols:
>           raise ValueError(f"Missing required price columns: {missing_cols}")
E           ValueError: Missing required price columns: ['close']

backend/greyoak_score/pillars/base.py:90: ValueError
________ TestSchemaValidation.test_fundamentals_optional_columns_logged ________

self = <tests.unit.test_schema_validation.TestSchemaValidation object at 0xfde8e8423390>
tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_fundamentals_optional_col0')
caplog = <_pytest.logging.LogCaptureFixture object at 0xfde8c419a2d0>

        def test_fundamentals_optional_columns_logged(self, tmp_path, caplog):
            """Test that missing optional columns are properly logged."""
            csv_data = """ticker,quarter_end,roe_3y
    TEST,2024-03-31,0.15
    """
            csv_file = tmp_path / "fundamentals.csv"
            csv_file.write_text(csv_data)
    
            df = load_fundamentals_csv(csv_file)
    
            # Check that optional metrics are logged
>           assert "Available metrics: 1/12" in caplog.text
E           AssertionError: assert 'Available metrics: 1/12' in ''
E            +  where '' = <_pytest.logging.LogCaptureFixture object at 0xfde8c419a2d0>.text

backend/tests/unit/test_schema_validation.py:85: AssertionError
=============================== warnings summary ===============================
backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-36 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-38 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-40 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-42 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-43 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-41 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-44 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-45 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-39 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-37 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-46 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-48 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-49 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-47 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-50 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-35 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=HDFCBANK&series=EQ&symbolCount=1&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-20 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-22 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-24 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-26 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-28 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-23 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-30 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-32 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-34 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-21 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-25 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-27 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-33 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-19 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-31 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-29 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=TCS&series=EQ&symbolCount=2&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-4 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-5 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=11-05-2020&toDate=18-09-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-6 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-8 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-9 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=28-01-2021&toDate=07-06-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-10 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-12 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-14 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-16 (get_history)
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 136, in get_history
      return pd.concat((t1.result, t2.result))
                        ^^^^^^^^^
  AttributeError: 'ThreadReturns' object has no attribute 'result'
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-3 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=01-01-2020&toDate=10-05-2020 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-17 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=06-07-2022&toDate=13-11-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-18 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=14-11-2022&toDate=31-12-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-7 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=19-09-2020&toDate=27-01-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-15 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=25-02-2022&toDate=05-07-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-11 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=08-06-2021&toDate=16-10-2021 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/test_api.py::test_endpoints
  /root/.venv/lib/python3.11/site-packages/_pytest/threadexception.py:58: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-13 (get_history)
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 464, in _make_request
      self._validate_conn(conn)
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 1093, in _validate_conn
      conn.connect()
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 790, in connect
      sock_and_verified = _ssl_wrap_socket_and_match_hostname(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connection.py", line 969, in _ssl_wrap_socket_and_match_hostname
      ssl_sock = ssl_wrap_socket(
                 ^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 480, in ssl_wrap_socket
      ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/ssl_.py", line 524, in _ssl_wrap_socket_impl
      return ssl_context.wrap_socket(sock, server_hostname=server_hostname)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 517, in wrap_socket
      return self.sslsocket_class._create(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/usr/local/lib/python3.11/ssl.py", line 1104, in _create
      self.do_handshake()
    File "/usr/local/lib/python3.11/ssl.py", line 1382, in do_handshake
      self._sslobj.do_handshake()
  ssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 787, in urlopen
      response = self._make_request(
                 ^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 488, in _make_request
      raise new_e
  urllib3.exceptions.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)
  
  The above exception was the direct cause of the following exception:
  
  Traceback (most recent call last):
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 644, in send
      resp = conn.urlopen(
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/connectionpool.py", line 841, in urlopen
      retries = retries.increment(
                ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/urllib3/util/retry.py", line 519, in increment
      raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.11/threading.py", line 1045, in _bootstrap_inner
      self.run()
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 132, in run
      self.result = self._target(*self._args, **self._kwargs)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 138, in get_history
      return get_history_quanta(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 143, in get_history_quanta
      df = url_to_df(url=url,
           ^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/history.py", line 151, in url_to_df
      resp = url(**params)
             ^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/nsepy/commons.py", line 167, in __call__
      return self.session.get(url, params=kwargs, proxies = self.proxy )
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 602, in get
      return self.request("GET", url, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 589, in request
      resp = self.send(prep, **send_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in send
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 724, in <listcomp>
      history = [resp for resp in gen]
                ^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 265, in resolve_redirects
      resp = self.send(
             ^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/sessions.py", line 703, in send
      r = adapter.send(request, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/root/.venv/lib/python3.11/site-packages/requests/adapters.py", line 675, in send
      raise SSLError(e, request=request)
  requests.exceptions.SSLError: HTTPSConnectionPool(host='www1.nseindia.com', port=443): Max retries exceeded with url: /products/dynaContent/common/productsSymbolMapping.jsp?dataType=PRICEVOLUMEDELIVERABLE&segmentLink=3&dateRange=&symbol=RELIANCE&series=EQ&symbolCount=2&fromDate=17-10-2021&toDate=24-02-2022 (Caused by SSLError(SSLError(1, '[SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:1016)')))
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

backend/tests/integration/test_all_six_pillars.py: 990 warnings
backend/tests/integration/test_data_pipeline.py: 1650 warnings
backend/tests/integration/test_pillars_ftr.py: 990 warnings
backend/tests/unit/test_data_hygiene.py: 1 warning
backend/tests/unit/test_pillars_q.py: 10 warnings
  /root/.venv/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice
    return np.nanmean(a, axis, out=out, keepdims=keepdims)

backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_all_six_pillars_with_real_data
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_all_six_pillars_with_real_data returned <class 'dict'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_combined_pillar_matrix
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_combined_pillar_matrix returned <class 'pandas.core.frame.DataFrame'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_fundamentals_pillar_with_real_data
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_fundamentals_pillar_with_real_data returned <class 'pandas.core.frame.DataFrame'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_technicals_pillar_with_real_data
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_technicals_pillar_with_real_data returned <class 'pandas.core.frame.DataFrame'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_relative_strength_pillar_with_real_data
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_relative_strength_pillar_with_real_data returned <class 'pandas.core.frame.DataFrame'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_all_three_pillars_together
  /root/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_all_three_pillars_together returned <class 'pandas.core.frame.DataFrame'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

backend/tests/test_predictor_rules.py::test_xsctn_fallback_when_small_n
  /app/backend/predictor/infer.py:139: RuntimeWarning: invalid value encountered in cast
    base_score = np.round(w_prob * P_p + (1 - w_prob) * P_ra).astype(int)

backend/tests/unit/test_data_hygiene.py::TestWinsorization::test_winsorize_caps_outliers
  /app/backend/greyoak_score/core/data_hygiene.py:68: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '[ 0.99  1.    2.    3.    4.    5.    6.    7.    8.    9.   10.   11.
   12.   13.   14.   15.   16.   17.   18.   19.   20.   21.   22.   23.
   24.   25.   26.   27.   28.   29.   30.   31.   32.   33.   34.   35.
   36.   37.   38.   39.   40.   41.   42.   43.   44.   45.   46.   47.
   48.   49.   50.   51.   52.   53.   54.   55.   56.   57.   58.   59.
   60.   61.   62.   63.   64.   65.   66.   67.   68.   69.   70.   71.
   72.   73.   74.   75.   76.   77.   78.   79.   80.   81.   82.   83.
   84.   85.   86.   87.   88.   89.   90.   91.   92.   93.   94.   95.
   96.   97.   98.   98.01]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
    df.loc[sector_mask, col] = df.loc[sector_mask, col].clip(p1, p99)

backend/tests/unit/test_data_hygiene.py::TestWinsorization::test_winsorize_by_sector_separate
  /app/backend/greyoak_score/core/data_hygiene.py:68: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '[ 0.49  1.    2.    3.    4.    5.    6.    7.    8.    9.   10.   11.
   12.   13.   14.   15.   16.   17.   18.   19.   20.   21.   22.   23.
   24.   25.   26.   27.   28.   29.   30.   31.   32.   33.   34.   35.
   36.   37.   38.   39.   40.   41.   42.   43.   44.   45.   46.   47.
   48.   48.51]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
    df.loc[sector_mask, col] = df.loc[sector_mask, col].clip(p1, p99)

backend/tests/unit/test_data_hygiene.py::TestApplyDataHygiene::test_full_pipeline
  /app/backend/greyoak_score/core/data_hygiene.py:68: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '[0.09 1.   2.   3.   4.   5.   6.   7.   8.   8.91]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
    df.loc[sector_mask, col] = df.loc[sector_mask, col].clip(p1, p99)

backend/tests/unit/test_golden_values.py::TestGoldenValues::test_numerical_stability
  /root/.venv/lib/python3.11/site-packages/pandas/core/nanops.py:1010: RuntimeWarning: invalid value encountered in subtract
    sqr = _ensure_numeric((avg - values) ** 2)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED backend/test_api.py::test_endpoints - Failed: async def functions are ...
FAILED backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_pillar_score_ranges_and_distributions
FAILED backend/tests/integration/test_all_six_pillars.py::TestAllSixPillars::test_s_z_tracking_validation
FAILED backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_pillar_score_distributions
FAILED backend/tests/integration/test_pillars_ftr.py::TestPillarsFTRIntegration::test_deterministic_pillar_scores
FAILED backend/tests/performance/test_performance.py::TestAPIPerformance::test_infrastructure_health_performance
FAILED backend/tests/performance/test_performance.py::TestAPIPerformance::test_application_health_performance
FAILED backend/tests/performance/test_performance.py::TestRateLimitingPerformance::test_rate_limiting_enforcement
FAILED backend/tests/performance/test_performance.py::TestRateLimitingPerformance::test_health_endpoint_exemption
FAILED backend/tests/performance/test_performance.py::TestConcurrencyPerformance::test_concurrent_user_simulation
FAILED backend/tests/performance/test_performance.py::TestDatabasePerformance::test_connection_pool_efficiency
FAILED backend/tests/unit/test_persistence.py::TestDatabaseInitialization::test_init_with_custom_url
FAILED backend/tests/unit/test_persistence.py::TestDatabaseInitialization::test_init_with_environment_variables
FAILED backend/tests/unit/test_persistence.py::TestDatabaseInitialization::test_init_with_defaults
FAILED backend/tests/unit/test_persistence.py::TestUtilityFunctions::test_get_database_singleton
FAILED backend/tests/unit/test_pillars_f.py::TestFundamentalsPillar::test_partial_missing_metrics
FAILED backend/tests/unit/test_pillars_f.py::TestFundamentalsPillar::test_multiple_quarters_takes_latest
FAILED backend/tests/unit/test_pillars_q.py::TestQualityPillar::test_omp_stability_lower_better
FAILED backend/tests/unit/test_pillars_q.py::TestQualityPillar::test_missing_quality_data
FAILED backend/tests/unit/test_pillars_q.py::TestQualityPillar::test_empty_fundamentals_data
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_basic_sector_momentum_scoring
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_s_z_calculation_cross_sector
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_horizon_weighting
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_missing_sector_data
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_single_sector_case
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_volatility_protection
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_s_z_summary_function
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_critical_s_z_output_format
FAILED backend/tests/unit/test_pillars_s.py::TestSectorMomentumPillar::test_cross_sector_normalization_not_within_sector
FAILED backend/tests/unit/test_schema_validation.py::TestSchemaValidation::test_fundamentals_optional_columns_logged
ERROR backend/tests/unit/test_persistence.py::TestDatabaseInitialization::test_safe_connection_info
ERROR backend/tests/unit/test_persistence.py::TestConnectionManagement::test_connection_context_manager_success
ERROR backend/tests/unit/test_persistence.py::TestConnectionManagement::test_connection_context_manager_error
ERROR backend/tests/unit/test_persistence.py::TestConnectionManagement::test_connection_context_manager_rollback_on_error
ERROR backend/tests/unit/test_persistence.py::TestConnectionManagement::test_test_connection_success
ERROR backend/tests/unit/test_persistence.py::TestConnectionManagement::test_test_connection_failure
ERROR backend/tests/unit/test_persistence.py::TestSaveScore::test_save_score_success
ERROR backend/tests/unit/test_persistence.py::TestSaveScore::test_save_score_invalid_input
ERROR backend/tests/unit/test_persistence.py::TestSaveScore::test_save_score_empty_ticker
ERROR backend/tests/unit/test_persistence.py::TestSaveScore::test_save_score_invalid_score_range
ERROR backend/tests/unit/test_persistence.py::TestSaveScore::test_save_score_database_error
ERROR backend/tests/unit/test_persistence.py::TestGetScore::test_get_score_found
ERROR backend/tests/unit/test_persistence.py::TestGetScore::test_get_score_not_found
ERROR backend/tests/unit/test_persistence.py::TestGetScore::test_get_score_invalid_ticker
ERROR backend/tests/unit/test_persistence.py::TestGetScore::test_get_score_invalid_mode
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByTicker::test_get_scores_by_ticker_basic
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByTicker::test_get_scores_by_ticker_with_filters
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByTicker::test_get_scores_by_ticker_invalid_mode
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByBand::test_get_scores_by_band_success
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByBand::test_get_scores_by_band_invalid_band
ERROR backend/tests/unit/test_persistence.py::TestGetScoresByBand::test_get_scores_by_band_invalid_mode
ERROR backend/tests/unit/test_persistence.py::TestUtilityFunctions::test_row_to_score_output_conversion
ERROR backend/tests/unit/test_persistence.py::TestUtilityFunctions::test_row_to_score_output_invalid_data
ERROR backend/tests/unit/test_persistence.py::TestDatabaseStats::test_get_database_stats_success
ERROR backend/tests/unit/test_persistence.py::TestDatabaseStats::test_get_database_stats_error
===== 30 failed, 276 passed, 3700 warnings, 25 errors in 244.69s (0:04:04) =====**: For unit testing the predictor logic.
- **Docker/PostgreSQL**: Core infrastructure, though not directly used for MVP data storage.
</key_technical_concepts>

<code_architecture>
The project's backend is under .

nsepythonlightgbmscikit-learnroutes_predictor.pyyfinanceyfinancensepynsepythonnsepython
The  file was modified to include the new FastAPI router  from .
The  was created to define parameters for the predictor model.
The  directory houses the core logic for the Predictor Model.
The  was created to test specific components of the predictor logic.
Multiple temporary Python scripts were created to test data sources, download data, and run various validation phases for the Score Engine and Predictor Model.
</code_architecture>

<pending_tasks>
- Address infrastructure-level routing issues (OPTIONS preflight returning 405,  returning HTML).
- Resolve the Predictor Model's fundamental learning issue (model not generating confident signals). This requires re-evaluating feature engineering, labeling strategy, training data volume, and potentially the model choice.
- Run Test #4 (Quality Spread Analysis) for the GreyOak Score Engine.
- Expand Score Engine validation to a larger stock universe (150-200 stocks) and extend historical data (e.g., back to 2015).
- Implement optional Stress-Bridge gate for the Predictor Model.
- Implement Phase 2 Predictor enhancements (sector models, multiple horizons, barrier calibration, regime awareness, PostgreSQL integration, weekly retraining, PSI drift monitors, Investor combiner).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was critically analyzing the performance of the newly developed **Predictor Model MVP**. After implementing the model (using LightGBM, triple-barrier labeling, and MVP features) and integrating its API, initial testing showed all predictions failing amplitude gates, capping scores at 49. Even after relaxing the gate thresholds, no confident buy/sell signals were generated. A subsequent historical walk-forward backtest (specifically a gate-free simulation as requested by the user) confirmed a deeper issue: the LightGBM model is fundamentally not learning predictive patterns from the current feature set and labeling strategy. It consistently produces near-random probabilities (mean  around 52%), resulting in zero strong buy or buy signals across over 64,000 predictions. While the architectural integrity of the predictor (no lookahead bias, proper walk-forward validation) is sound, the machine learning component itself is not yet functional in generating actionable trading signals.
</current_work>

<optional_next_step>
Build a simple rule-based predictor to generate actionable signals.
</optional_next_step>
